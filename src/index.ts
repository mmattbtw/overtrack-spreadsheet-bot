import axios from "axios";
import {
  GoogleSpreadsheet,
  GoogleSpreadsheetWorksheet,
} from "google-spreadsheet";
import { createClient } from "redis";
import config from "./config";
import constants from "./constants";
import { overTrackData } from "./typings";

const doc = new GoogleSpreadsheet(config.googleSheetID);

(async function () {
  const redisClient = createClient();
  await redisClient.connect();

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: config.googleAccountEmail,
    private_key: config.googlePrivateKey,
  });

  await doc.loadInfo();

  let sheet: GoogleSpreadsheetWorksheet;
  // ty is cool but balls are cooler

  if (doc.sheetCount < 1) {
    // If there are no sheets present:
    sheet = await doc.addSheet({
      // Make a new sheet with the Tank, DPS, and Support header values.
      headerValues: ["TANK", "DPS", "SUPPORT"],
    });
  } else if (doc.sheetCount == 1) {
    // If there is already a sheet:
    const sheets = doc.sheetsByIndex; // Grab the current sheet
    sheet = sheets[0]; // Put it in `sheet` variable.
  }

  // MAIN FUNCION \\
  /* This runs every 3 minutes
    It polls the Overtrack API, checks if the last game's ID and the local ID are the same
    If they aren't, adds the gained (or lost) SR to the spreadsheet */
  setInterval(async () => {
    console.log("Pinging Overtrack API...");
    let resp: overTrackData = await axios.get(constants.overTrackURL);
    if (
      (await redisClient.get(constants.redisPrefix + "lastGameID")) ===
      resp.data.games[0].key
    ) {
      return;
    }
    // let resp = {
    //   // Mock data.
    //   data: {
    //     games: [
    //       {
    //         game_type: "ranked",
    //         role: "damage",
    //         start_sr: 2500,
    //       },
    //     ],
    //   },
    // };

    const formattedData = `=HYPERLINK("https://twitch.tv/mmattbtw", "${resp.data.games[0].start_sr}")`;

    if (resp.data.games[0].game_type === "ranked") {
      // there HAS to be a better way to do this rather than do an if/else chain
      if (resp.data.games[0].role.toLowerCase() == "damage") {
        await sheet.addRow({
          DPS: formattedData,
        });
      } else if (resp.data.games[0].role.toLowerCase() == "support") {
        await sheet.addRow({
          SUPPORT: formattedData,
        });
      } else if (resp.data.games[0].role.toLowerCase() == "tank") {
        await sheet.addRow({
          TANK: formattedData,
        });
      }
      await redisClient.set(
        constants.redisPrefix + "lastGameId",
        resp.data.games[0].key
      );
    }

    console.log(resp.data.games[0]);
    console.log("Data recieved.");
  }, 1000); // Function is called every 3 minutes
})();
